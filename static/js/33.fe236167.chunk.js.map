{"version":3,"sources":["components/report/share/TaskProgress/TaskProgress.js","components/report/share/TaskProgress/index.js","routes/taskProgressReport/index.js","actions/api/members.js","actions/api/boards.js"],"names":["HighchartsMore","Highcharts","TaskProgress","props","_this","Object","classCallCheck","this","_super","call","state","loading","setOptions","bind","assertThisInitialized","setState","prevProps","equal","boardId","chartOptions","chart","selectedLanguage","startDate","endDate","_this$formatData","formatData","tasks","series","type","title","text","language","taskProgressChart","xAxis","categories","yAxis","min","legend","shadow","tooltip","shared","plotOptions","bar","grouping","borderWidth","_this$props","users","members","newData","copy_members","JSON","parse","stringify","tasksNames","map","task","tasksHours","parseFloat","forEach","member","id","tasks_reports","count","hours","hours_report","index","push","name","estimated_hours","data","color","pointPadding","pointPlacement","user","length","stacking","react_default","a","createElement","CircularProgress","highcharts_react_min_default","highcharts","options","Component","connect","TaskProgressContainer","filterOption","boards","moment","toDate","changeData","_this2","fetchProjectMembers","projectId","then","response","ok","body","miembro","console","log","_this3","start_date","end_date","fetchGetReportedTasksBoard","_this$state","classes","langDict","className","headerContainer","Typography_default","tasktracking","taskprogress","line","grid","style","display","alignSelf","marginLeft","boardSelection","from","to","wrapper","share_TaskProgress_TaskProgress","textAlign","report","noReportedHoursInPeriod","dispatch","bindActionCreators","fetchGetProjectBoards","notifyError","withStyles","height","width","modalContent","fontSize","fontFamiliy","margin","fontWeight","marginTop","marginBottom","selectText","backgroundColor","info","box","marginRight","padding","customIcon","border-radius","Report","selectProject","react","share_TaskProgress","ownProps","String","match","params","board_id","__webpack_require__","d","__webpack_exports__","fetchTaskAssign","fetchTaskUnassign","fetchUpdateMember","fetchDeleteMember","fetchQuitMember","_constants_api_members__WEBPACK_IMPORTED_MODULE_0__","FETCH_GET_ALL_MEMBERS","fetch","url","concat","method","FETCH_TASK_ASSIGN","userId","FETCH_TASK_UNASSIGN","memberId","FETCH_UPDATE_MEMBER","FETCH_DELETE_MEMBER","FETCH_QUIT_PROJECT","fetchCreateBoard","FETCH_CREATE_BOARD","FETCH_GET_ALL_PROJECT_BOARDS","fetchGetBoards","FETCH_GET_ALL_BOARDS","fetchUpdateBoard","FETCH_UPDATE_BOARD","fetchDeleteBoard","FETCH_DELETE_BOARD","FETCH_REPORTED_TASKS_BETWEEN_DATES","queryParams","_Users_carlosjouanne_Desktop_T2_2021_2_S4_Grupo1_Web_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","fetchGetTasksBoard","FETCH_TASKS_BETWEEN_DATES"],"mappings":"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","file":"static/js/33.fe236167.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport equal from 'fast-deep-equal';\nimport CircularProgress from '../../../lib/CircularProgress';\n\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport HighchartsMore from 'highcharts/highcharts-more';\n\n\nimport language from '../../../../constants/language';\nimport { connect } from 'react-redux';\n\n\nHighchartsMore(Highcharts);\n\nclass TaskProgress extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n    };\n    this.setOptions.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({ loading: false });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!equal(this.props.boardId, prevProps.boardId)) {\n      const chartOptions = this.setOptions();\n      Highcharts.chart('chart', chartOptions);\n    }\n    if (!equal(this.props.selectedLanguage, prevProps.selectedLanguage)) {\n      const chartOptions = this.setOptions();\n      Highcharts.chart('chart', chartOptions);\n    }\n    if (!equal(this.props.startDate, prevProps.startDate)) {\n      const chartOptions = this.setOptions();\n      Highcharts.chart('chart', chartOptions);\n    }\n    if (!equal(this.props.endDate, prevProps.endDate)) {\n      const chartOptions = this.setOptions();\n      Highcharts.chart('chart', chartOptions);\n    }\n  }\n\n\n  setOptions() {\n    const { tasks, series } = this.formatData();\n    const { selectedLanguage } = this.props;\n    return {\n      chart: {\n        type: 'bar'\n      },\n      title: {\n        text: language[selectedLanguage].taskProgressChart.title\n      },\n      xAxis: {\n        categories: tasks,\n      },\n      yAxis: [{\n        min: 0,\n        title: {\n          text: language[selectedLanguage].taskProgressChart.yAxis\n        }\n      }],\n      legend: {\n        shadow: false\n      },\n      tooltip: {\n        shared: true\n      },\n      plotOptions: {\n        bar: {\n          grouping: false,\n          shadow: false,\n          borderWidth: 0\n        }\n      },\n      series: series,\n\n    }\n  }\n  formatData() {\n    const { selectedLanguage, tasks, users, members } = this.props;\n    const newData = [];\n    const copy_members = JSON.parse(JSON.stringify(members));\n    const tasksNames = tasks.map((task) => { return (task['name']) });\n    const tasksHours = tasks.map((task) => { return (parseFloat(task['estimated_hours'])) });\n    copy_members.forEach((member) => {\n      if (users[member.id]) {\n        tasks.forEach((task) => {\n          if (!member.tasks_reports[task.id]) {\n            member.tasks_reports[task.id] = member.count;\n            member.hours[member.count] = 0;\n            member.count += 1;\n          }\n          if (users[member.id][task.id]) {\n            const hours_report = parseFloat(users[member.id][task.id]);\n            const index = member.tasks_reports[task.id];\n            member.hours[index] = hours_report;\n          }\n        });\n      }\n    });\n    newData.push({\n      name: language[selectedLanguage].taskProgressChart.estimated_hours,\n      data: tasksHours,\n      color: '#d8d8d8',\n      pointPadding: 0.2,\n      pointPlacement: -0.2\n    });\n\n    copy_members.forEach((user) => {\n      if (user.hours.length > 0) {\n        newData.push({\n          name: user['name'],\n          data: user['hours'],\n          pointPadding: 0.4,\n          pointPlacement: -0.2,\n          stacking: 'normal'\n        });\n      }\n    });\n    return ({\n      'tasks': tasksNames,\n      'series': newData,\n    });\n  }\n\n\n  render() {\n    if (this.state.loading) return <CircularProgress />;\n    if (this.props.tasks.length > 0) {\n      const chartOptions = this.setOptions();\n      return (\n        <div>\n          <div id=\"chart\">\n            <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nTaskProgress.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  members: PropTypes.array.isRequired,\n  users: PropTypes.array.isRequired,\n  boardId: PropTypes.any.isRequired,\n  startDate: PropTypes.any.isRequired,\n  endDate: PropTypes.any.isRequired,\n  selectedLanguage: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedLanguage: state.user.language,\n  };\n};\n\n\n\nexport default connect(\n  mapStateToProps,\n)(TaskProgress);","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '../../../lib/CircularProgress';\nimport moment from 'moment';\n\nimport { notifyError } from '../../../../actions/notification';\nimport { fetchGetProjectBoards } from '../../../../actions/api/boards';\nimport { fetchProjectMembers } from '../../../../actions/api/members';\nimport { fetchGetReportedTasksBoard } from '../../../../actions/api/boards';\n\nimport language from '../../../../constants/language';\nimport TaskProgress from './TaskProgress';\n\nconst styles = {\n  wrapper: {\n    height: '400px',\n    width: 'auto',\n  },\n  modalContent: {\n    width: '600px',\n    height: '400px',\n  },\n  title: {\n    fontSize: '28px',\n    fontFamiliy:\n      '-apple-system, \".SFNSText-Regular\", \"San Francisco\", BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", \"Lucida Grande\", Arial, sans-serif',\n    color: 'rgb(68, 68, 68)',\n  },\n  headerContainer: {\n    margin: '30px',\n    width: 'auto',\n  },\n  text: {\n    color: '#2a3d41',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginTop: '10px',\n    marginBottom: '10px',\n  },\n  selectText: {\n    color: '#2a3d41',\n    fontSize: 14,\n    fontWeight: 'normal',\n    marginTop: '10px',\n    marginBottom: '10px',\n    marginLeft: '10px',\n  },\n  grid: {\n    display: 'flex',\n    width: '100%',\n    margin: '10px',\n  },\n  line: {\n    width: 'auto',\n    height: '1px',\n    backgroundColor: '#CCCCCC',\n  },\n  info: {\n    color: '#2a3d41',\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginTop: '5px',\n  },\n  box: {\n    display: 'flex',\n    marginRight: '10px',\n    padding: '5px',\n  },\n  customIcon: {\n    height: '24px',\n    width: '24px',\n    display: 'block',\n    'border-radius': '50%',\n    marginRight: '5px',\n  }\n};\n\n\nclass TaskProgressContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      tasks: [],\n      users: [],\n      filterOption: '',\n      boards: [],\n      members: [],\n      startDate: this.props.startDate,\n      endDate: moment().toDate(),\n      boardId: null,\n\n    };\n    this.changeData = this.changeData.bind(this);\n  }\n\n  componentDidMount() {\n    this.props\n      .fetchProjectMembers(this.props.projectId)\n      .then((response) => {\n        if (response.ok) {\n          this.setState({\n            members: response.body[\"members\"].map((miembro) => {\n              return (\n                { id: miembro[\"id\"], name: miembro['name'], tasks_reports: {}, count: 0, hours: [] })\n            })\n          });\n        }\n        else {\n          console.log(\"Bad Request\");\n        }\n      });\n    this.changeData(this.props.boardId, this.props.startDate, this.props.endDate);\n    this.setState({\n      loading: false,\n    });\n  }\n\n  changeData(boardId, startDate, endDate) {\n    const body = {\n      start_date: startDate,\n      end_date: endDate,\n    };\n    this.props.fetchGetReportedTasksBoard(boardId, body).then((response) => {\n      if (response.ok) {\n        this.setState({ tasks: response.body.tasks, users: response.body.users, loading: false, filterOption: boardId });\n      }\n    });\n\n  }\n\n  render() {\n    if (this.state.loading) return <CircularProgress />;\n    const { tasks, users, members, endDate, startDate, boardId } = this.state;\n    const { classes, selectedLanguage } = this.props;\n    const langDict = language[selectedLanguage].taskProgressChart;\n    return (\n      <div className={classes.headerContainer}>\n        <Typography className={classes.title}>\n          {language[selectedLanguage].tasktracking.taskprogress}\n        </Typography>\n        <div className={classes.line} />\n        <div className={classes.grid}>\n          <div style={{ display: 'flex', alignSelf: 'center', marginLeft: '10px' }} >\n            <Typography className={classes.text}>\n              {langDict.boardSelection}:{' '}{this.props.boardId}\n            </Typography>\n\n            <div\n              style={{ display: 'flex', alignSelf: 'center', marginLeft: '10px' }}\n            >\n              <Typography className={classes.text}>\n                {langDict.from}:{' '}{this.props.startDate}\n              </Typography>\n            </div>\n            <div\n              style={{ display: 'flex', alignSelf: 'center', marginLeft: '10px' }}\n            >\n              <Typography className={classes.text}>\n                {langDict.to}:{' '}{this.props.endDate}\n              </Typography>\n            </div>\n          </div>\n        </div>\n        <div className={classes.line} />\n        <div className={classes.wrapper}>\n          {this.state.filterOption !== '' && tasks.length > 0 && <TaskProgress tasks={tasks} users={users} members={members} startDate={startDate} endDate={endDate} boardId={boardId} />}\n          {this.state.filterOption === '' && (\n            <Typography style={{ textAlign: 'center' }}>\n              {language[selectedLanguage].report.noReportedHoursInPeriod}\n            </Typography>\n          )}\n          {this.state.filterOption !== '' && tasks.length === 0 && (\n            <Typography style={{ textAlign: 'center' }}>\n              {language[selectedLanguage].report.noReportedHoursInPeriod}.\n            </Typography>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\n\nTaskProgressContainer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  projectId: PropTypes.string.isRequired,\n  notifyError: PropTypes.func.isRequired,\n  selectedLanguage: PropTypes.string.isRequired,\n  fetchGetProjectBoards: PropTypes.func.isRequired,\n  fetchGetReportedTasksBoard: PropTypes.func.isRequired,\n  filterOption: PropTypes.any.isRequired,\n  boardId: PropTypes.any.isRequired,\n  endDate: PropTypes.any.isRequired,\n  startDate: PropTypes.any.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedLanguage: state.user.language,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators(\n    {\n      fetchGetProjectBoards,\n      fetchProjectMembers,\n      notifyError,\n      fetchGetReportedTasksBoard,\n\n    },\n    dispatch,\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(withStyles(styles)(TaskProgressContainer));","import React, { Component, Fragment } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { selectProject } from '../../actions/user';\nimport { fetchProjectMembers } from '../../actions/api/members';\n\nimport CircularProgress from '../../components/lib/CircularProgress';\n\nimport TaskProgressReportsContainer from '../../components/report/share/TaskProgress';\n\nclass Report extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.selectProject(this.props.projectId);\n        this.props.fetchProjectMembers(this.props.projectId)\n            .then(() => {\n                this.setState({ loading: false });\n            });\n    }\n\n    render() {\n        if (this.state.loading) {\n            return <CircularProgress />;\n        }\n        return (\n            <Fragment>\n                <TaskProgressReportsContainer projectId={this.props.projectId} startDate={this.props.startDate} endDate={this.props.endDate} boardId={this.props.boardId} />\n            </Fragment>\n        );\n    }\n}\n\nReport.propTypes = {\n    projectId: PropTypes.string.isRequired,\n    startDate: PropTypes.string.isRequired,\n    endDate: PropTypes.string.isRequired,\n    boardId: PropTypes.string.isRequired,\n    selectProject: PropTypes.func.isRequired,\n    fetchProjectMembers: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        projectId: String(ownProps.match.params.id),\n        startDate: String(ownProps.match.params.start_date),\n        endDate: String(ownProps.match.params.end_date),\n        boardId: String(ownProps.match.params.board_id),\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        selectProject,\n        fetchProjectMembers,\n    }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Report);\n","import {\n  FETCH_GET_ALL_MEMBERS,\n  FETCH_TASK_ASSIGN,\n  FETCH_TASK_UNASSIGN,\n  FETCH_UPDATE_MEMBER,\n  FETCH_DELETE_MEMBER,\n  FETCH_QUIT_PROJECT,\n} from '../../constants/api/members';\n\nexport const fetchProjectMembers = id => ({\n  type: FETCH_GET_ALL_MEMBERS,\n  fetch: true,\n  url: `/projects/${id}/members/`,\n  params: {\n    method: 'GET',\n  },\n});\n\nexport const fetchTaskAssign = (id, body) => ({\n  type: FETCH_TASK_ASSIGN,\n  fetch: true,\n  url: `/tasks/${id}/assign/`,\n  params: {\n    method: 'POST',\n    body,\n  },\n});\n\nexport const fetchTaskUnassign = (id, userId) => ({\n  type: FETCH_TASK_UNASSIGN,\n  fetch: true,\n  url: `/tasks/${id}/users/${userId}/unassign/`,\n  params: {\n    method: 'DELETE',\n  },\n});\n\nexport const fetchUpdateMember = (projectId, memberId, body) => ({\n  type: FETCH_UPDATE_MEMBER,\n  fetch: true,\n  url: `/projects/${projectId}/members/${memberId}/`,\n  params: {\n    method: 'PUT',\n    body,\n  },\n});\n\nexport const fetchDeleteMember = (projectId, memberId) => ({\n  type: FETCH_DELETE_MEMBER,\n  fetch: true,\n  url: `/projects/${projectId}/members/${memberId}/`,\n  params: {\n    method: 'DELETE',\n  },\n});\n\nexport const fetchQuitMember = (projectId, memberId) => ({\n  type: FETCH_QUIT_PROJECT,\n  fetch: true,\n  url: `/projects/${projectId}/members/${memberId}/`,\n  params: {\n    method: 'DELETE',\n  },\n});\n","import {\n  FETCH_GET_ALL_PROJECT_BOARDS,\n  FETCH_GET_ALL_BOARDS,\n  FETCH_CREATE_BOARD,\n  FETCH_UPDATE_BOARD,\n  FETCH_DELETE_BOARD,\n  FETCH_UPDATE_BOARD_ORDER,\n  FETCH_REPORTED_TASKS_BETWEEN_DATES,\n  FETCH_TASKS_BETWEEN_DATES,\n} from '../../constants/api/boards';\n\nexport const fetchCreateBoard = body => ({\n  type: FETCH_CREATE_BOARD,\n  fetch: true,\n  url: '/boards/',\n  params: {\n    method: 'POST',\n    body,\n  },\n});\n\nexport const fetchGetProjectBoards = projectId => ({\n  type: FETCH_GET_ALL_PROJECT_BOARDS,\n  fetch: true,\n  url: `/projects/${projectId}/boards`,\n  params: {\n    method: 'GET',\n  },\n});\n\nexport const fetchGetBoards = () => ({\n  type: FETCH_GET_ALL_BOARDS,\n  fetch: true,\n  url: '/boards',\n  params: {\n    method: 'GET',\n  },\n});\n\nexport const fetchUpdateBoard = (id, body) => ({\n  type: FETCH_UPDATE_BOARD,\n  fetch: true,\n  url: `/boards/${id}/`,\n  params: {\n    method: 'PUT',\n    body,\n  },\n});\n\nexport const fetchDeleteBoard = id => ({\n  type: FETCH_DELETE_BOARD,\n  fetch: true,\n  url: `/boards/${id}/`,\n  params: {\n    method: 'DELETE',\n  },\n});\n\nexport const fetchUpdateBoardOrder = (id, body) => ({\n  type: FETCH_UPDATE_BOARD_ORDER,\n  fetch: true,\n  url: `/boards/${id}/order`,\n  params: {\n    method: 'PUT',\n    body,\n  },\n});\nexport const fetchGetReportedTasksBoard = (id, body) => ({\n  type: FETCH_REPORTED_TASKS_BETWEEN_DATES,\n  fetch: true,\n  url: `/boards/${id}/reported_tasks_between_dates`,\n  params: {\n    method: 'GET',\n  },\n  queryParams: {\n    ...body,\n  },\n});\nexport const fetchGetTasksBoard = (id, body) => ({\n  type: FETCH_TASKS_BETWEEN_DATES,\n  fetch: true,\n  url: `/boards/${id}/tasks_between_dates`,\n  params: {\n    method: 'GET',\n  },\n  queryParams: {\n    ...body,\n  },\n});\n"],"sourceRoot":""}